Задачите да се решат, спазвайки добрите практики на Python (the Zen of Python). 
Към всички задачи да са реализирани подходящи юнит тестове (в отделен файл).

Задача 1.
Да се напише функция to_digits(N), която връща списък от всички цифри на N.
Пример:
to_digits(123) -> [1, 2, 3]
to_digits(99999) -> [9, 9, 9, 9, 9]
to_digits(123023) -> [1, 2, 3, 0, 2, 3]

Задача 2.
Да се напише функция sum_of_digits(N), която намира сумата на цифрите на дадено число N.
Пример:
sum_of_digits(1325132435356)  -> 43
sum_of_digits(123)  -> 6
sum_of_digits(6)  -> 6
sum_of_digits(-10)  -> 1

Задача 3.
Да се напише функция fact_digits(N), която връща сумата от факториелите на всяка цифра от N. Например за N=145, 
това означава 1! + 4! + 5!. 
Пример:
fact_digits(111) -> 3
fact_digits(145) -> 145
fact_digits(999) -> 1088640

Задача 4.
Да се напише функция palindrome(obj), която приема обект obj и връща "истина", ако неговото низово репрезентиране е палиндром,
"лъжа" - в противен случай.

Подсказка: виж str()
Пример:
palindrome(121) -> True
palindrome("kapak") -> True
palindrome("baba") -> False

Задача 5.
Да се напише функция count_vowels(str), която преброява гласните в подадения низ str, 
неправейки разлика между малка и голяма буква.

Пример:
count_vowels("Python") -> 2
count_vowels("Theistareykjarbunga") -> 8   #It's a volcano name!
count_vowels("grrrrgh!") -> 0
count_vowels("Github is the second best thing that happend to programmers, after the keyboard!") -> 22
count_vowels("A nice day to code!") -> 8

Задача 6.
Да се напише функция char_histogram(str), която приема символен низ str и връща като резултат речник (dictionary), 
в който ключовете са символите от str, а стойностите - срещането на всеки символ в низа.
Пример:
char_histogram("Python!") -> { 'P': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1, '!': 1 }


Задача 7.
Да се напише функция sum_matrix(m), където m е NxM матрица (списък от списъци), която намира сумата на всички числа 
в матрицата.
Пример:
sum_matrix( [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> 45
sum_matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) -> 0
sum_matrix([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) -> 55

Задача 8.
Да се напише функция max_consecutive(items), която приема списък от обекти items и връща най-дългата 
последователност от равни елементи.
Пример:
max_consecutive([1, 2, 3, 3, 3, 3, 4, 3, 3]) -> 4
max_consecutive([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5]) -> 3